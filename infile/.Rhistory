ncol=3,labels = LETTERS[1:3])
packageVersion('phyloseq')
library("phyloseq")
otumat = matrix(sample(1:100, 100, replace = TRUE), nrow = 10, ncol = 10)
otumat
otumat = matrix(sample(1:100, 100, replace = TRUE), nrow = 10, ncol = 10)
rownames(otumat) <- paste0("OTU", 1:nrow(otumat)) # name the rows with a label of name OTU#
colnames(otumat) <- paste0("Sample", 1:ncol(otumat)) # name the columns with a label of
otumatrix
otumat
knitr::kable(otumat)
taxmat = matrix(sample(letters, 70, replace = TRUE), nrow = nrow(otumat), ncol = 7)
taxmat
nrow(otumat)
sample(letters, 70, replace = TRUE)
rownames(otumat)
rownames(taxmat) <- rownames(otumat)
colnames(taxmat) <- c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species")
knitr::kable(taxmat)
OTU = otu_table(otus, taxa_are_rows = TRUE)
otus = matrix(sample(1:100, 100, replace = TRUE), nrow = 10, ncol = 10)
rownames(otus) <- paste0("OTU", 1:nrow(otus)) # name the rows with a label of name OTU#
colnames(otus) <- paste0("Sample", 1:ncol(otus)) # name the columns with a label of name Sample#
knitr::kable(otus)
OTU = otu_table(otus, taxa_are_rows = TRUE)
OTY
OTU
TAX = tax_table(taxmat)
physeq = phyloseq(OTU, TAX)
physeq
sampledata = sample_data(data.frame(
Location = sample(LETTERS[1:4], size=nsamples(physeq), replace=TRUE),
Depth = sample(50:1000, size=nsamples(physeq), replace=TRUE),
row.names=sample_names(physeq),
stringsAsFactors=FALSE
))
sampledata
knitr::kable(sampledata)
knitr::kable(sampledata)
sampledata
as.data.frame(sampledata)
sample_data(sampledata)
sampledata = data.frame(
Location = sample(LETTERS[1:4], size=nsamples(physeq), replace=TRUE),
Depth = sample(50:1000, size=nsamples(physeq), replace=TRUE),
row.names=sample_names(physeq),
stringsAsFactors=FALSE
)
knitr::kable(sampledata)
sampledata <- sample_data(sampledata)
sampledata
ntaxa(physeq)
heatmap(physeq)
phyloseq::plot_heatmap(physeq)
plot_bar(physeq, fill = "Family")
theme_set(theme_bw())
plot_bar(physeq, fill = "Family")
?plot_bar
physeq1 = merge_phyloseq(physeq, sampledata)
physeq1
plot_bar(physeq, fill = "Family") +
theme(legend.justification = "top", strip.text.y = element_text(angle = 0, size = 6, face="bold"),
strip.background = element_rect(colour = "transparent", fill = "transparent"),
panel.background = element_blank())
bar <- plot_bar(physeq, fill = "Family")
bar
bar + theme(strip.text.y = element_text(angle = 0, size = 8, face="bold"),
strip.background = element_rect(colour = "transparent", fill = "transparent"),
panel.background = element_blank())
theme_set( theme_classic())
bar <- plot_bar(physeq, fill = "Family")
bar
display.brewer.pal(n = 5, name = 'Set3')
library(RColorBrewer)
# display.brewer.all()
display.brewer.pal(n = 5, name = 'Set3')
display.brewer.all()
bar+scale_color_brewer()
bar + scale_color_brewer(palette = "Paired")
bar <- plot_bar(physeq, fill = "Family")
bar + scale_color_brewer(palette = "Paired")
plot_bar(physeq)
? geom_bar
bar <- plot_bar(physeq, fill = "Family")
bar + geom_bar() + scale_color_brewer(palette = "Paired")
plot_bar(physeq, fill = "Family") +
geom_bar(position="fill") + scale_color_brewer(palette = "Paired")
plot_bar(physeq, fill = "Family", scale_color_brewer(palette = "Paired"))
plot_bar
packageVersion("phyloseq")
plot_bar(physeq, fill = "Genus")
plot_bar(physeq, fill = "Genus") +scale_color_identity()
cols <- c("8" = "red", "4" = "blue", "6" = "darkgreen", "10" = "orange")
plot_bar(physeq, fill = "Genus") + scale_colour_manual(values = cols)
plot_bar(physeq, fill = "Genus") + geom_bar(stat="identity") +
scale_fill_brewer(palette="Set1")
bar <- plot_bar(physeq, fill = "Genus")
bar
bar + geom_bar(stat="identity") +
scale_fill_brewer(palette="Paired")
bar + geom_bar(stat="identity") +
scale_fill_brewer(palette="Paired")
bar + geom_bar(stat="identity") +
scale_fill_brewer(palette="Spectral")
physeq1 = merge_phyloseq(physeq, sampledata)
physeq1
print(physeq1)
sample_data(physeq1)
plot_bar(physeq1, x="Location", fill="Genus")
plot_bar(physeq1, x="Location", fill="Genus") +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Spectral")
plot_bar(physeq1, "Family", fill="Genus", facet_grid=~Location)
taxa_names(physeq1)
rtree = rtree(ntaxa(physeq1), rooted=TRUE, tip.label=taxa_names(physeq1))
rtree
names(rtree)
ape::tiplabels(rtree)
tiplabels(rtree)
rtree$tip.label
identical(rtree$tip.label, taxa_names(physeq1))
taxa_names(physeq1)
order(rtree$tip.label)
order(-rtree$tip.label)
rtree$tip.label
sort(rtree$tip.label)
plot(rtree)
plot(rtree)
physeq2 = phyloseq(OTU, TAX, sampledata, random_tree)
physeq2 = merge_phyloseq(physeq1, rtree)
physeq2
physeq2 = phyloseq(OTU, TAX, sampledata, rtree)
physeq2
physeq1 = merge_phyloseq(physeq1, rtree)
physeq1
plot_tree(physeq1, color="Location", label.tips="taxa_names", ladderize="left", plot.margin=0.3)
otu_table(physeq1)
taxa_names(physeq1)
plot_tree(physeq1, color="Location", label.tips="taxa_names", ladderize="left", plot.margin=0.3)
plot_tree(physeq1, color="Location", label.tips="taxa_names", ladderize="left", plot.margin=0.3)
plot_tree(physeq1, color="Depth", shape="Location", label.tips="taxa_names", ladderize="right", plot.margin=0.3)
plot_tree(physeq1, color="Depth", shape="Location", label.tips="taxa_names", ladderize="right", plot.margin=0.3, size="abundance")
plot_tree(physeq1, color="Location", label.tips="taxa_names", size="abundance", ladderize="left", plot.margin=0.3)
prune_taxa(names(sort(taxa_sums(physeq1),TRUE)), physeq1)
prune <- prune_taxa(names(sort(taxa_sums(physeq1),TRUE)), physeq1)
?prune_taxa
Pr  = transform_sample_counts(prune, function(x) x / sum(x) )
prune <- prune_taxa(names(sort(taxa_sums(physeq1),TRUE)), physeq1)
prune  = transform_sample_counts(prune, function(x) x / sum(x) )
prune
plot_heatmap(physeq1)
plot_heatmap(prune)
prune <- prune_taxa(names(sort(taxa_sums(physeq1),TRUE)), physeq1)
prune  = transform_sample_counts(prune, function(x) x / sum(x) * 100 )
plot_heatmap(prune)
h <- plot_heatmap(prune, low="#66CCFF", high="#000033",
na.value="white",
sample.label="Location",
taxa.label="Family",
#sample.order="Cruice",
method = "NMDS", distance = "bray"
# taxa.order="Species")
)
h
h <- plot_heatmap(physeq1, low="#66CCFF", high="#000033",
na.value="white",
sample.label="Location",
taxa.label="Family",
#sample.order="Cruice",
method = "NMDS", distance = "bray"
# taxa.order="Species")
)
h
h + facet_grid(Class ~ . + Location, scales = "free", space = "free") +
theme(legend.justification = "top", strip.text.y = element_text(angle = 0, size = 4, face="bold"),
strip.background = element_rect(colour = "transparent", fill = "transparent"))
h <- plot_heatmap(physeq1, low="#66CCFF", high="#000033",
na.value="white",
#sample.label="Location",
taxa.label="Family",
#sample.order="Cruice",
method = "NMDS", distance = "bray"
# taxa.order="Species")
)
h
h + facet_grid(Class ~ . + Location, scales = "free", space = "free") +
theme(legend.justification = "top", strip.text.y = element_text(angle = 0, size = 4, face="bold"),
strip.background = element_rect(colour = "transparent", fill = "transparent"))
plot_heatmap(physeq1, low="#66CCFF", high="#000033")
plot_heatmap(physeq1
)
h <- plot_heatmap(physeq1, low="#66CCFF", high="#000033",
na.value="white",
#sample.label="Location",
taxa.label="Family",
sample.order="Sample",
#method = "NMDS", distance = "bray"
taxa.order="Species")
sample_data(physeq1)
sample_data(physeq1)h <- plot_heatmap(physeq1, low="#66CCFF", high="#000033",
#sample.label="Location",
taxa.label="Family",
#method = "NMDS", distance = "bray"
taxa.order="Species")
h <- plot_heatmap(physeq1, low="#66CCFF", high="#000033",
#sample.label="Location",
taxa.label="Family",
#method = "NMDS", distance = "bray"
taxa.order="Species")
h
h <- plot_heatmap(physeq1, low="#66CCFF", high="#000033",
sample.label="Location",
taxa.label="Family",
#method = "NMDS", distance = "bray"
)
h
h <- plot_heatmap(physeq1, low="#66CCFF", high="#000033",
taxa.label="Family",
method = "NMDS", distance = "bray"
)
h
?plot_heatmap
h <- plot_heatmap(physeq1, low="#66CCFF", high="#000033",
taxa.label="Family",
method = "NMDS", distance = "bray"
)
print(h)
h + facet_grid(Class ~ . + Location, scales = "free", space = "free")
h + facet_grid(Class ~ ., scales = "free", space = "free")
h + facet_grid(Class ~ ., scales = "free", space = "free")
otutable(physeq1)
otu_table(physeq1)
dotp <- otu_table(physeq1)
dotp <- as.data.frame(otu_table(physeq1))
dotp
p<-ggplot(dot) +
geom_dotplot(binaxis='y', stackdir='center')
p<-ggplot(dotp) +
geom_dotplot(binaxis='y', stackdir='center')
p
h + geom_dotplot(binaxis='y', stackdir='center')
dp <- as.data.frame(otu_table(physeq1))
rownames(dp)
colnames(dp)
p<-ggplot(dot, aes(x=colnames(dp), y=rownames(dp))) +
geom_dotplot(binaxis='y', stackdir='center')
p<-ggplot(dp, aes(x=colnames(dp), y=rownames(dp))) +
geom_dotplot(binaxis='y', stackdir='center')
p
ggdotchart(dp, x = colnames(dp), y =rownames(dp),
ggtheme = theme_bw())
library(ggpubr)
ggdotchart(dp, x = colnames(dp), y =rownames(dp),
ggtheme = theme_bw())
rownames(dp)
ggdotchart(dp)
ggdotchart(dp, x = colnames(dp))
ggdotchart(dp, x = colnames(dp), y =rownames(dp),
ggtheme = theme_bw())
?pmelt
??pmelt
?phyloseq::pmelt
phyloseq::psmelt(dp)
phyloseq::psmelt(physeq1)
dp <- phyloseq::psmelt(physeq1)
head(dp)
ggdotchart(dp, x = Sample, y =Abundance,
ggtheme = theme_bw())
ggdotchart(dp, x = Sample, y =Abundance,
ggtheme = theme_bw())
ggdotchart(dp, x = "Sample", y ="Abundance",
ggtheme = theme_bw())
ggdotchart(dp, x = "Sample", y ="Abundance",
group = "Domain", color = "Location",
palette = c('#999999','#E69F00','#56B4E9'),
rotate = TRUE,
sorting = "descending",
ggtheme = theme_bw(),
y.text.col = TRUE )
ggdotchart(dp, x = "Sample", y ="Abundance",
group = "Domain", color = "Location",
#palette = c('#999999','#E69F00','#56B4E9'),
rotate = TRUE,
sorting = "descending",
ggtheme = theme_bw(),
y.text.col = TRUE )
ggdotchart(dp, x = "Sample", y ="Abundance",
group = "Location", color = "Domain",
#palette = c('#999999','#E69F00','#56B4E9'),
rotate = TRUE,
sorting = "descending",
ggtheme = theme_bw(),
y.text.col = TRUE )
ggdotchart(dp, x = "Sample", y ="Abundance",
group = "Location", color = "Domain",
palette = c('#999998', '#999999','#E69F00','#56B4E9'),
rotate = TRUE,
sorting = "descending",
ggtheme = theme_bw(),
y.text.col = TRUE )
ggdotchart(dp, x = "Sample", y ="Abundance",
group = "Location", color = "Domain",
palette = scale_fill_brewer(palette="Spectral"),
rotate = TRUE,
sorting = "descending",
ggtheme = theme_bw(),
y.text.col = TRUE )
ggdotchart(dp, x = "Sample", y ="Abundance",
group = "Location", color = "Domain",
palette = scale_fill_brewer(palette="Spectral"),
rotate = TRUE,
sorting = "descending",
ggtheme = theme_bw(),
y.text.col = TRUE )
ggdotchart(dp, x = "Sample", y ="Abundance",
group = "Location", color = "Domain",
#palette = scale_fill_brewer(palette="Spectral"),
rotate = TRUE,
sorting = "descending",
ggtheme = theme_bw(),
y.text.col = TRUE )
?ggdotchart
ggdotchart(dp, x = "Sample", y ="Abundance",
group = "Location", color = "Domain",
#palette = scale_fill_brewer(palette="Spectral"),
rotate = TRUE,
sorting = "descending",
ggtheme = theme_bw(),
y.text.col = TRUE,
dot.size = "Abundance")
scale_fill_brewer(palette="Spectral")
brewer.pal(n = 10, name = "Oranges")
brewer.pal(n = 5, name = "Oranges")
?ggdotchart
ggdotchart(dp, x = "Sample", y ="Abundance",
group = "Location", color = "Domain",
palette = "jco" #scale_fill_brewer(palette="Spectral"),
rotate = TRUE,
sorting = "descending",
ggtheme = theme_bw(),
y.text.col = TRUE,
dot.size = "Abundance")
ggdotchart(dp, x = "Sample", y ="Abundance",
group = "Location", color = "Domain",
palette = "jco",
rotate = TRUE,
sorting = "descending",
ggtheme = theme_bw(),
y.text.col = TRUE,
dot.size = "Abundance")
bar + geom_bar(stat="identity") +
scale_fill_brewer(palette="Spectral")
plot_bar(physeq1, "Family", fill="Genus", facet_grid=~Location) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Spectral")
sessionInfo()
p <-  ggtree(tree, branch.length='none', layout='circular') + geom_treescale(width=0.4) +
geom_nodepoint(color="#b5e521", alpha=1/4, size=4)
p
multiplot(t1, t2, ncol=2)
head(m)
DE <- read.table("RSEM.isoform.counts.matrix.Female_vs_Undiff.edgeR.DE_results")
str(DE)
p1 <- p +
geom_vline(xintercept = 0) + # vertical line
geom_hline(yintercept = 0) + # horizontal line
geom_hline(yintercept = -log10(0.0001), linetype = "dashed") + #
geom_vline(xintercept = c(-2, 2), linetype = "dashed")
p1 + xlab(bquote(~Log[2]~ "fold change")) + ylab(bquote(~-Log[10]~italic(P)))
p <- ggplot(DE, aes(x=logFC, y=-log10(PValue))) +
geom_point(aes(color = Sig)) +
theme_classic()
p1 <- p +
geom_vline(xintercept = 0) + # vertical line
geom_hline(yintercept = 0) + # horizontal line
geom_hline(yintercept = -log10(0.0001), linetype = "dashed") + #
geom_vline(xintercept = c(-2, 2), linetype = "dashed")
p1 + xlab(bquote(~Log[2]~ "fold change")) + ylab(bquote(~-Log[10]~italic(P)))
DE$Sig <- "Non Sig or basal"  # create column Sig
DE$Sig[(abs(DE$logFC) > 2)] <- "logFC"
DE$Sig[(DE$FDR<0.05) & (abs(DE$logFC)>2)] <- "logFC_FDR" #
p <- ggplot(DE, aes(x=logFC, y=-log10(PValue))) +
geom_point(aes(color = Sig)) +
theme_classic()
p1 <- p +
geom_vline(xintercept = 0) + # vertical line
geom_hline(yintercept = 0) + # horizontal line
geom_hline(yintercept = -log10(0.0001), linetype = "dashed") + #
geom_vline(xintercept = c(-2, 2), linetype = "dashed")
p1 + xlab(bquote(~Log[2]~ "fold change")) + ylab(bquote(~-Log[10]~italic(P)))
p2 <-  p1 + geom_text_repel(
data = subset(DE, -log10(PValue) > maxlab),
aes(label = Sig),
size = 2.5,
box.padding = unit(0.2, "lines"),
point.padding = unit(0.2, "lines")
)
P2
p2
maxlab <- max(-log10(DE$PValue)) - 1
head(DE)
rownames(DE)
DE$transcript <- rownames(DE)
gos
y <- read_trinotate(paste0(dir,"Trinotate.xls"))
knitr::kable(summary_trinotate(y))
library(trinotateR)
y <- read_trinotate(paste0(dir,"Trinotate.xls"))
knitr::kable(summary_trinotate(y))
go <- split_GO(y)
gos <- summary_GO(go)
head(gos[order(-gos$transcripts),])
got <- na.omit(go, cols = "protein")
x$transcript <- rownames(x)
m <- merge(got, x, suffix = c("transcript"), all=FALSE)
m <- m[order(m$transcript),c(1,4,5:12)]
head(m)
DEannot <- merge(gos, DE, suffix = c("transcript"), all=FALSE)
head(g0s)
DEannot <- merge(m, DE, suffix = c("transcript"), all=FALSE)
dim(DE)
dim(DE)
dim(M)
dim(m)
blast <- split_blast2(y)
split_blast2 <- function (x, hit = "sprot_Top_BLASTX_hit")
{
y <- x[!is.na(get(hit)), .(get(hit), gene_id, transcript_id,
prot_id)]
z <- strsplit(y$V1, "`")
n <- sapply(z, length)
z <- strsplit(unlist(z), "\\^")
if (any(sapply(z, "[", 1) != sapply(z, "[", 2)))
print("WARNING: check different values in columns 1 and 2")
NAME <- gsub("^RecName: Full=", "", sapply(z, "[", 6))
NAME <- gsub("SubName: Full=", "", NAME)
NAME <- gsub(";$", "", NAME)
NAME <- gsub(" \\{[^}]+}", "", NAME)
x1 <- data.frame(gene = rep(y$gene_id, n), transcript = rep(y$transcript_id,
n), protein = rep(gsub(".*\\|", "", y$prot_id), n), uniprot = sapply(z,
"[", 1), align = sapply(z, "[", 3), identity = as.numeric(gsub("%ID",
"", sapply(z, "[", 4))), evalue = as.numeric(gsub("E:",
"", sapply(z, "[", 5))), name = NAME, lineage = sapply(z,
"[", 7), domain = gsub("; .*", "", sapply(z, "[", 7)),
genus = gsub(".*; ", "", sapply(z, "[", 7)), stringsAsFactors = FALSE)
message(nrow(x1), " ", hit, " annotations")
data.table(x1)
}
blast <- split_blast2(y)
head(blast)
head(DEannot)
DEannot <- merge(DE, m suffix = c("transcript"), all=FALSE)
DEannot <- merge(DE, m, suffix = c("transcript"), all=FALSE)
head(DEannot)
MF <- gos[gos$ontology=="molecular_function",]
CC <- gos[gos$ontology=="cellular_component",]
BP <- gos[gos$ontology=="biological_process",]
knitr::kable(table(gos$ontology))
head(bp)
head(BP)
DEannot <- merge(DE, m, suffix = c("transcript"), all=FALSE)
head(DEannot)
blast2 <- summary_blast(blast)
knitr::kable(head(blast2[order(-blast2$transcripts),]))
DEannot <- merge(DE, blast, suffix = c("transcript"), all=FALSE)
head(DEannot)
maxlab
p1 + geom_text_repel(
data = subset(DEannot, -log10(PValue) > maxlab),
aes(label = uniprot),
size = 2.5,
box.padding = unit(0.2, "lines"),
point.padding = unit(0.2, "lines")
)
p1 + geom_text_repel(
data = subset(DEannot, -log10(PValue) > maxlab),
aes(label = name),
size = 2.5,
box.padding = unit(0.2, "lines"),
point.padding = unit(0.2, "lines")
)
p1 + geom_text_repel(
data = subset(DEannot, -log10(PValue) > 5),
aes(label = name),
size = 2.5,
box.padding = unit(0.2, "lines"),
point.padding = unit(0.2, "lines")
)
maxlab
p1 + geom_text_repel(
data = subset(DEannot, -log10(PValue) > 7),
aes(label = name),
size = 2.5,
box.padding = unit(0.2, "lines"),
point.padding = unit(0.2, "lines")
)
p
scale_color_brewer()
p <- ggplot(DE, aes(x=logFC, y=-log10(PValue))) +
geom_point(aes(color = Sig)) + theme_classic() +
scale_color_brewer()
p
head(m[,1:9])
datatable(m[,1:9] , escape=1, options = list( pageLength = 10 ), rownames = FALSE )
library(DT)
datatable(m[,1:9] , escape=1, options = list( pageLength = 10 ), rownames = FALSE )
m <- merge(got, x, suffix = c("transcript"), all=FALSE)
m <- m[order(m$transcript),c(1,4,5:12)]
dim(m)
datatable(m , filter = 'top', escape=1, options = list( pageLength = 10 ),
rownames = FALSE,
autoWidth = TRUE)
